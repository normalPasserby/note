
* jvm  
  认真阅读一遍源码中的README-builds.html
  所有的文件,包括源码和依赖项目,都不要放在包含中文的
  目录里面

** menmery
*** 程序计数器
   每条线程都需要有一个独立的程序计数器
   如果线程正在执行的是一个Java方法,这个计数器记录的是正在执行的虚拟机字节码指
令的地址;如果正在执行的是Native方法,这个计数器值则为空(Undefined)。
*** Java虚拟机栈
    线程私有
    局部变量表、操作数栈、动态链接、方法出口
    局部变量表存放了编译期可知的各种基本数据类型and对象引用
    64位长度的long和double类型的数据会占用2个局部变量空间(Slot)
    局部变量表所需的内存空间在编译期间完成分配
*** Java堆(Java Heap)
    Java虚拟机所管理的内存中最大的一块。线程共享

    所有的对象实例以及数组都要在堆上分配
    但是随着JIT编译器的发展与逃逸分析技
    术逐渐成熟,栈上分配、标量替换 优化技术将会导致一些微妙的变化发生,所有的对象都
    分配在堆上也渐渐变得不是那么“绝对”了。
**** 分配方式
     假设Java堆中内存是绝对规整的,所有用过的内
     存都放在一边,空闲的内存放在另一边,中间放着一个指针作为分界点的指示器,那所分配
     内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离,这种分配方式称
     为“指针碰撞”(Bump the Pointer)。
     如果Java堆中的内存并不是规整的,已使用的内存和空
     闲的内存相互交错,那就没有办法简单地进行指针碰撞了,虚拟机就必须维护一个列表,记
     录上哪些内存块是可用的,在分配的时候从列表中找到一块足够大的空间划分给对象实例,
     并更新列表上的记录,这种分配方式称为“空闲列表”(Free
     List)。选择哪种分配方式由
     Java堆是否规整决定,而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决
     定。因此,在使用Serial、ParNew等带Compact过程的收集器时,系统采用的分配算法是指针
     碰撞,而使用CMS这种基于Mark-Sweep算法的收集器时,通常采用空闲列表。
     
*** 方法区
    各个线程共享的内存区域,
    它用于存储已被虚
    拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
**** 运行时常量池
     除了保存Class文件中描述的符号引用外,
     还会把翻译出来的直接引用也存储在运行时常量池中 。

** HotSpot虚拟机对象
*** new
    虚拟机遇到一条new指令时,首先将去检查这个指令的参数是否能在常量池中定位到一
    个类的符号引用,并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没
    有,那必须先执行相应的类加载过程,在类加载检查通过后,接下来虚拟机将为新生对象分配
    内存。对象所需内存的大小在类加载完成后便可完全确定为对象分配空间的任务等同于把一
    块确定大小的内存从Java堆中划分出来。
    
    虚拟机需要将分配到的内存空间都初始化为零值(不包括对象头),
    
    对对象进行必要的设置,
    例如这个对象是哪个类的实例、如何才能找
    到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对
    象头(Object Header)之中。根据虚拟机当前的运行状态的不同,如是否启用偏向锁等,对
    象头会有不同的设置方式。
    
    接着执行<init>方法,

*** 对象 head
    对象在内存中存储的布局可以分为3块区域:对象头(Header)、
    实例数据(Instance Data)和对齐填充(Padding)。
    
    HotSpot虚拟机的对象头包括两部分信息,第一部分用于存储对象自身的运行时数据,
    如哈希码(HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时
    间戳等,
    
    对象头的另外一部分是类型指针,即对象指向它的类元数据的指针,
    
    如果对象是一个Java数组,那在对象头中还必须有一块用于记录数组长度的数据,

*** 对象的访问定位
    句柄访问
    直接指针

** 类加载器
   通过一个类的全限定名来获取描述此类的二进制字节流
   符号引用变成直接引用
   解析调用一定是个静态的过程,在编译期间就完全确定,在类装载的解析阶段就会把涉
   及的符号引用全部转变为可确定的直接引用

*** 解析
    只要能被invokestatic和invokespecial指令调用的方法,都可以在解析阶段中确定唯一的
    调用版本,符合这个条件的有静态方法、私有方法、实例构造器、父类方法4类,它们在类
    加载的时候就会把符号引用解析为该方法的直接引用。这些方法可以称为非虚方法

*** 虚函数
    通过栈的类指针找到方法表，方法表似乎像是虚函数表，其中有指向方法的指针
    
** TODO GC 简略版 
   存活判定与回收
   引用计数 可达行分析（树遍历）
   周的书有介绍 

** 3-5部分的某些东西
** TODO 深入理解Java虚拟机 JVM高级特性与最佳实践 280
*** 拟机性能监控与故障处理工具
*** 调优案例分析与实战
*** Class文件结构
*** 字节码指令简介


* TODO java
** TODO think in java pdf
* TODO IDEA
  官方教程
* TODO spring 先细节 在宏观 设计模式
** 学SPRING
   [[http://www.java1234.com/a/javabook/javaweb/2017/0530/8169.html][精通Spring 4.x  企业应用开发实战 ]]
   [[http://www.olecn.com/download.php?id=2724][spring in action]]

   [[https://www.quora.com/How-do-I-learn-Spring-Framework][How do I learn Spring Framework?]]
   [[https://www.zhihu.com/question/21142149/answer/52383396][springsh]]

   深入就必须去看官方文档。[[https://docs.spring.io/spring/docs/5.0.2.RELEASE/spring-framework-reference/][Spring Framework Documentation]]
   [[https://github.com/waylau/spring-framework-4-reference][中文翻译《Spring Framework 4.x参考文档》 ]]

** TODO [#A] [[https://github.com/code4craft/tiny-spring/releases][tiny-spring]]
   让你搞明白spring最核心的ioc和aop两个功能，
   建议从ioc看起，相对来说相关的代码较少，类少，能让你快速有个大概的了解，增加点信

   下载下来所有step1--step10所有的项目，全部导入到工程，
   看看作者是怎样一步步把spring整个框架搭起来的，一步步顺
   着spring的功能完善代码，顺便学学spring类的组织结构，学到
   很多，等学完后头脑很清晰，确实受益匪浅，
   debug断点运行是我针对这个项目学习最好的方式，
** TODO [#B] SPRING技术内幕：深入解析SPRING架构与设计原理 pdf 
  +先了解大致内容，之后宏观看一下，最后微观
 
*** spring core
**** ioc
***** 简介 控制反转 依赖由容器注入  方式 在对象创建时注入依赖
      ioc容器的基本规范 BeanFactory （接口）
      BeanDefinition Bean的定义（就是一个类似int,string的数据类型）
      也叫 FactoryBean
***** refresh 以 FileSystemXmlApplicationContext 为例
      ioc容器为 DefaultListableBeanFactory
      BeanDefinittionReader为  XmlBeanDefinittionReader
      + refreshBeanFactory()
        createBeanFactory();
        customizeBeanFactory(beanFactory);
        loadBeanDefinitions(beanFactory);//用到beanDefinitionReader 
****** 定位 资源
       getResourceByPath()  
       主要用了 FileSystemResource()
****** 读入 得到Bean
       reader 用DOM解析XML 成为doc对象
       转化成BeanDefinition
****** 注册
     hashmap 十分简单
***** 依赖注入  getBean()
      chlib实例化
** TODO 看《源码解析》，用IDEA + MAVEN 不修改和编译了。。
** TODO 架构探险从零开始写JavaWeb框架 pdf  实在不行，只看不做
*** maven
**** utf8
     <properties>
       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
****  JDK 1.6 
     <build>
     <plugins>
     <!-- Compile -->
     <plugin>
     <groupId> org.apache.maven.plugins </groupId>
         <artifactId> maven-compiler-plugin </artifactId>
         <version> 3.3 </version>
         <configuration>
             <source> 1.6 </source>
             <target> 1.6 </target>
         </configuration>
     </plugin>
     </plugins>
     </build>
**** 打包时不test,（可选）
     <!-- Test -->
     <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-surefire-plugin</artifactId>
     <version>2.18.1</version>
     <configuration>
     <skipTests>true</skipTests>
     </configuration>
     </plugin>
** TODO [[http://www.cnblogs.com/xing901022/p/4178963.html][阅读源码的前期准备]] 
　　1 Spring jar包以及源码使用
　　2 简单的spring运行示例
　　3 利用断点调试程序，如何快速的阅读程序【快捷键等的使用】
** spring ioc  反射 xml 类加载
   某个资源中（如xml）中读取数据，并配置BeanDefinition中的 Bean 元数据

   BeanDefinition： 描述了 Bean 元数据 
   类信息 
   Bean实例
   propertyValues 里面包含了一个个 PropertyValue 条目，
   每个条目都是键值对 String - Object，
   分别对应要生成实例的属性的名字与类型。
   
   getBean()时创建实例，
   并放入BeanDefinition中，用反射设置了字段,
   如果依赖的类没实例，就创建一个。

   ioc容器 用Map来保存BeanDefinition
   ApplicationContext = ioc容器 + resourceloader 
** sprint aop  动态代理 ASM，CGLib和javassist，后两者是对ASM的封装。
   TargetSource 被代理对象的实例和类型
   methodInterceptor 拦截器
   ClassFilter 用正则对类名作匹配

   配合BeanFactory提供的 BeanPostProcessor 可以造Bean的代理对象
   就是BeanDefinition中的Bean是代理的
